generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  username        String     @unique
  email           String     @unique
  passwordHash    String?
  googleId        String?
  image           String?
  phone           String?
  birthDate       DateTime?
  favoriteTeam    String?
  shirtSize       String?
  location        String?
  emailVerified   Boolean    @default(false)
  role            Role       @default(USER)
  products        Product[]
  favorites       Favorite[]
  messagesSent    Message[]  @relation("SentMessages")
  messagesRecvd   Message[]  @relation("ReceivedMessages")
  orders          Order[]
  balance         Balance?
  following       Follow[]   @relation("UserFollows")
  followers       Follow[]   @relation("UserFollowers")
  ratingsReceived Rating[]   @relation("UserRatingsReceived")
  ratingsGiven    Rating[]   @relation("UserRatingsGiven")
  blogPosts       BlogPost[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

enum Role {
  USER
  ADMIN
}

model Product {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  category    Category
  price       Float
  size        String?
  color       String?
  brand       String?
  player      String?
  condition   ProductCondition
  userId      String
  user        User             @relation(fields: [userId], references: [id])
  favorites   Favorite[]
  orderItems  OrderItem[]
  images      String[]
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
}

enum ProductCondition {
  ORIGINAL
  CLON
  COPIA
  USADO
  NUEVO
}

enum Category {
  JERSEY
  CHAMARRA
  SHORT
  CALCETAS
  TACHONES
  ESPINILLERAS
  BALON
  OTRO
}

model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  productId String
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}

model Order {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  buyerId   String
  buyer     User          @relation(fields: [buyerId], references: [id])
  items     OrderItem[]
  total     Float
  shipping  ShippingInfo?
  status    OrderStatus
  rating    Rating?
  createdAt DateTime      @default(now())
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model ShippingInfo {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId           String  @unique
  order             Order   @relation(fields: [orderId], references: [id])
  address           String
  estafetaGuideCode String?
  trackingUrl       String?
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String
  receiverId String
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  content    String
  timestamp  DateTime @default(now())
}

model Balance {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  amount    Float    @default(0.0)
  updatedAt DateTime @updatedAt
}

model Follow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String
  followingId String
  follower    User     @relation("UserFollows", fields: [followerId], references: [id])
  following   User     @relation("UserFollowers", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Rating {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  score       Int
  comment     String?
  ratedUserId String
  raterId     String
  orderId     String?  @unique
  ratedUser   User     @relation("UserRatingsReceived", fields: [ratedUserId], references: [id])
  rater       User     @relation("UserRatingsGiven", fields: [raterId], references: [id])
  order       Order?   @relation(fields: [orderId], references: [id])
  createdAt   DateTime @default(now())
}

model BlogPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
